// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/saipulmuiz/mnc-test-tahap2/repositories (interfaces: OrderRepo)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/saipulmuiz/mnc-test-tahap2/models"
	gorm "gorm.io/gorm"
)

// MockOrderRepo is a mock of OrderRepo interface.
type MockOrderRepo struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepoMockRecorder
}

// MockOrderRepoMockRecorder is the mock recorder for MockOrderRepo.
type MockOrderRepoMockRecorder struct {
	mock *MockOrderRepo
}

// NewMockOrderRepo creates a new mock instance.
func NewMockOrderRepo(ctrl *gomock.Controller) *MockOrderRepo {
	mock := &MockOrderRepo{ctrl: ctrl}
	mock.recorder = &MockOrderRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepo) EXPECT() *MockOrderRepoMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockOrderRepo) CreateOrder(arg0 *gorm.DB, arg1 *models.Order, arg2 []models.OrderDetail) (*models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOrderRepoMockRecorder) CreateOrder(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrderRepo)(nil).CreateOrder), arg0, arg1, arg2)
}

// GetOrderByID mocks base method.
func (m *MockOrderRepo) GetOrderByID(arg0 int) (*models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByID", arg0)
	ret0, _ := ret[0].(*models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByID indicates an expected call of GetOrderByID.
func (mr *MockOrderRepoMockRecorder) GetOrderByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByID", reflect.TypeOf((*MockOrderRepo)(nil).GetOrderByID), arg0)
}

// GetOrderDetailByOrderID mocks base method.
func (m *MockOrderRepo) GetOrderDetailByOrderID(arg0 int) (*[]models.OrderDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderDetailByOrderID", arg0)
	ret0, _ := ret[0].(*[]models.OrderDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderDetailByOrderID indicates an expected call of GetOrderDetailByOrderID.
func (mr *MockOrderRepoMockRecorder) GetOrderDetailByOrderID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderDetailByOrderID", reflect.TypeOf((*MockOrderRepo)(nil).GetOrderDetailByOrderID), arg0)
}

// GetOrders mocks base method.
func (m *MockOrderRepo) GetOrders(arg0, arg1, arg2 int) (*[]models.Order, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders", arg0, arg1, arg2)
	ret0, _ := ret[0].(*[]models.Order)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockOrderRepoMockRecorder) GetOrders(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockOrderRepo)(nil).GetOrders), arg0, arg1, arg2)
}
